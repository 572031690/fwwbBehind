<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/aop
		https://www.springframework.org/schema/aop/spring-aop.xsd">



    <bean id="AuthenFilter" class="com.xhy.shiro.filter.AuthenFilter">
        <property name="loginUrl" value="/web/unauth"/>
    </bean>
    <bean id="corsFilter" class="com.xhy.shiro.filter.CORSFilter"></bean>

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!--shiro 核心安全接口-->
        <property name="securityManager" ref="securityManager"/>
        <!--验证没有登陆后跳转的地址-->
        <property name="loginUrl" value="/web/unauth"/>
        <!--未授权时跳转的地址-->
        <property name="unauthorizedUrl" value="/web/unauthorized"/>
<!--        认证成功后跳转地址-->
        <property name="successUrl" value="/web/success"/>
        <!--读取初始自定义权限内容-->
        <!--如果使用authc验证,则需要重写rememberMe的过滤器,或配置fromAuthernticationFilter的Bean-->
        <property name="filters" >
            <map>
                <entry key="authc" value-ref="AuthenFilter"/>
                <entry key="authc" value-ref="corsFilter"/>
            </map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /web/logon=anon
                /web/logout=anon
                /web/shirologin=anon
                /web/invertPassword=anon
                /web/updateUserRole=anon
                /web/getUserRole=anon
                /web/deleteUser=anon
                /web/updateUser=anon
                /web/addUser=anon
                /web/listUser=anon
                /web/getUserRole=anon
                /web/addUserRole=anon
                /web/invertPassword=anon
                /web/updateStatus=anon
                /webitem/findAllitem=anon
                /webitem/updateItem=anon
                /webitem/addItem=anon
                /webitem/deleteItem=anon
                /Role/listRole=anon
                /Role/addRole=anon
                /Role/updateRole=anon
                /Role/deleteRole=anon
                /Perm/listPerm=anon
                /Perm/addPerm=anon
                /Perm/updatePerm=anon
                /Perm/deletePerm=anon
                /webneed/findAllNeed=anon
                /webneed/addNeed=anon
                /webneed/updateNeed=anon
                /webneed/deleteNeed=anon
                /web
                /**=user
            </value>
        </property>
    </bean>


    <!--2.安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="useRealm"/>
          <property name="rememberMeManager" ref="rememberMeManager"/>
<!--        <property name="authenticator" ref="authenticator"/>-->
<!--        <property name="authorizer" ref="authorizer" />-->
    </bean>

<!--    <bean id="authorizer" class="com.xhy.shiro.Authorizer"/>-->
<!--    <bean id="authenticator" class="com.xhy.shiro.Authenticator"/>-->



    <!--    3.配置自定义的Realm-->
    <bean id="useRealm" class="com.xhy.shiro.realm.UserRealm">
        <!--        userService在此处注入至UserRealm中-->
        <property name="cachingEnabled" value="true"/>
<!--  密码凭证对象-->
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
    </bean>
<!-- 通过HashedCredentialsMatcher对象来做密码的认证-->
    <bean id="credentialsMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <!--hashAlgorithmName md5 散列函数-->
        <property name="hashAlgorithmName" value="MD5"/>
        <!--hashIterations 散列次数-->
        <property name="hashIterations" value="2"/>
    </bean>

    <!--    4.注册安全管理对象-->
    <!--相当于调用SecruityUtils.setSecurityManager(securityManager)-->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

<!--      5.将shiro对Bean的生命周期管理的对象注入,交给spring管理-->
    <!--shiro 生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
<!--    默认会话模板-->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>
<!--    rememberMeCookie-->
    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
<!--        cookie只在http请求中可用，那么通过js脚本将无法读取到cookie信息，有效防止cookie被窃取-->
        <property name="httpOnly" value="true"/>
<!--        cookie的生命周期，单位：秒-->
        <property name="maxAge" value="604800"/>
    </bean>
<!--    rememberMe 管理器-->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUsOKTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!--  启用Aop可以支持AOP注解 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>
    <!--  配置权限的注解的advisor对象 -->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>



</beans>
